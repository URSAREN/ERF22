<launch>

    <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
    <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_laser" args="0.45 0 0.0 0 0 0 base_link laser" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="base_link_to_map" args="0 0 0 0 0 0 map base_link" />

    <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
        <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
        <param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->
        <!--param name="serial_baudrate"     type="int"    value="256000"--><!--A3 -->
        <param name="frame_id"            type="string" value="laser"/>
        <param name="inverted"            type="bool"   value="false"/>
        <param name="angle_compensate"    type="bool"   value="true"/>
    </node>
    
    <!-- Hector mapping for automatic map generation and localization -->
    <!-- Subscribe: /scan (sensor_msgs/LaserScan) -->
    <!-- Publish: /map_metadata (nav_msgs/MapMetaData), /map (nav_msgs/OccupancyGrid), 
                /slam_out_pose (geometry_msgs/PoseStamped), /poseupdate (geometry_msgs/PoseWithCovarianceStamped)   -->

    <arg name="tf_map_scanmatch_transform_frame_name" default="scanmatcher_frame"/>
    <arg name="base_frame" default="laser"/>
    <arg name="odom_frame" default="laser"/>
    <arg name="pub_map_odom_transform" default="true"/>
    <arg name="scan_subscriber_queue_size" default="5"/>
    <arg name="scan_topic" default="scan"/>
    <arg name="map_size" default="400"/>

    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
        <!-- Frame names -->
        <param name="map_frame" value="map" />
        <param name="base_frame" value="$(arg base_frame)" />
        <param name="odom_frame" value="$(arg odom_frame)" />

        <!-- Tf use -->
        <param name="use_tf_scan_transformation" value="true"/>
        <param name="use_tf_pose_start_estimate" value="false"/>
        <param name="pub_map_odom_transform" value="$(arg pub_map_odom_transform)"/>

        <!-- Map size / start point -->
        <param name="map_resolution" value="0.025"/>
        <param name="map_size" value="$(arg map_size)"/>
        <param name="map_start_x" value="0.5"/>
        <param name="map_start_y" value="0.5" />
        <param name="map_multi_res_levels" value="2" />

        <!-- Map update parameters -->
        <param name="update_factor_free" value="0.4"/>
        <param name="update_factor_occupied" value="0.9" />    
        <param name="map_update_distance_thresh" value="0.01"/>
        <param name="map_update_angle_thresh" value="0.01" />
        <param name="map_pub_period" value="0.5" />
        <param name="laser_z_min_value" value = "-1.0" />
        <param name="laser_z_max_value" value = "1.0" />

        <!-- Advertising config --> 
        <param name="advertise_map_service" value="true"/>

        <param name="scan_subscriber_queue_size" value="$(arg scan_subscriber_queue_size)"/>
        <param name="scan_topic" value="$(arg scan_topic)"/>


        <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)" />
    </node>

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(find dumb_wall_follower)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find dumb_wall_follower)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find dumb_wall_follower)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find dumb_wall_follower)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find dumb_wall_follower)/param/base_local_planner_params.yaml" command="load" />
    </node>

    
    <node pkg="dumb_wall_follower" name="main_node" type="main_node.py" output="screen">
        <rosparam file="$(find dumb_wall_follower)/param/Robot_A_params.yaml" command='load'/>
    </node>

    
    

</launch>